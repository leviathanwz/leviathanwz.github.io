<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Docker - Tag - loveLZZ的个人博客</title>
        <link>https://leviathanion.github.io/tags/docker/</link>
        <description>Docker - Tag - loveLZZ的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>chu.quntao@gmail.com (loveLzz)</managingEditor>
            <webMaster>chu.quntao@gmail.com (loveLzz)</webMaster><lastBuildDate>Sat, 29 Apr 2023 11:03:25 &#43;0800</lastBuildDate><atom:link href="https://leviathanion.github.io/tags/docker/" rel="self" type="application/rss+xml" /><item>
    <title>Docker使用教程</title>
    <link>https://leviathanion.github.io/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
    <pubDate>Sat, 29 Apr 2023 11:03:25 &#43;0800</pubDate>
    <author>loveLzz</author>
    <guid>https://leviathanion.github.io/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
    <description><![CDATA[<h1 id="docker使用教程">Docker使用教程</h1>
<h2 id="docker架构">Docker架构</h2>
<ul>
<li>image(镜像)：可以看作是一个root文件系统，是对环境和软件的包装</li>
<li>container(容器)：镜像类似于类，容器类似于实例</li>
<li>repository(仓库)：镜像库</li>
</ul>
<h2 id="docker基本使用">Docker基本使用</h2>
<h3 id="启动本地dokcer软件">启动本地dokcer软件</h3>
<ul>
<li>sudo systemctl start docker</li>
</ul>
<h3 id="通用">通用</h3>
<ul>
<li>查看所占空间<code>docker system df</code></li>
</ul>
<h3 id="repository使用">repository使用</h3>
<ul>
<li>获取image<code>docker pull [选项] [仓库地址[:端口号]/仓库名[:标签]]</code>
<ul>
<li>不加仓库地址，默认为docker hub</li>
</ul>
</li>
</ul>
<h3 id="image管理">image管理</h3>
<ul>
<li>列出本机的image文件:<code>docker image ls</code></li>
<li>根据容器生成image文件:<code>docker commit [选项] &lt;容器名ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></li>
<li>删除本机的image文件:<code>docker image rm [imageName]</code></li>
<li>删除所有处于停止状态的image:<code>docker image prune</code></li>
</ul>
<h3 id="container管理">container管理</h3>
<h4 id="文件管理">文件管理</h4>
<ul>
<li>列出本机运行的container文件:<code>docker container ls</code></li>
<li>列出本机所有的container文件:<code>docker container ls --all</code></li>
<li>导出容器:<code>docker export &lt;containerID&gt; &gt; *.tar</code></li>
<li>导入容器:<code>docker import *.tar &lt;镜像名&gt;:&lt;标签&gt;</code></li>
<li>删除本机的container文件:<code>docker container rm &lt;containerID&gt;</code></li>
<li>清理所有处于停止状态的容器:<code>docker container prune</code></li>
</ul>
<h4 id="运行管理">运行管理</h4>
<ul>
<li>启动容器:<code>docker run [选项] [imageName] [sh终端]</code>
<ul>
<li>选项可以省略</li>
<li><code>-p 本地端口号：docker端口号</code>端口映射</li>
<li><code>-d</code>后台运行不进入</li>
<li><code>-i</code>是允许交互式操作</li>
<li><code>-t</code>是终端</li>
</ul>
</li>
<li>进入容器:<code>docker exec -it &lt;容器名/id&gt; [sh终端]</code></li>
<li>终止容器:<code>docker container stop &lt;容器名/id&gt;</code></li>
<li>启动已终止容器:<code>docker container start &lt;容器名/id&gt;</code></li>
<li>重启容器:<code>docker container restart &lt;容器名/id&gt;</code></li>
</ul>
<h3 id="网络管理">网络管理</h3>
<h4 id="概述">概述</h4>
<p>Docker容器的网络允许容器间、容器与宿主机、以及容器与外部网络的通信。
Docker默认提供几种网络模式：bridge（桥接模式）、host（主机模式）、none（无网络）和overlay（覆盖网络）。</p>]]></description>
</item>
</channel>
</rss>
